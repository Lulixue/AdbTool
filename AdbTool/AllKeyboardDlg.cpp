// AllKeyboardDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "AdbTool.h"
#include "AllKeyboardDlg.h"
#include "afxdialogex.h"
#include "AdbInterface.h"
#include <map>
using std::map;

map<UINT, int> KEYCODE_MAP;
map<CString, int> SP_CHAR_KEYCODE_MAP;
map<CString, int> SP_OPR_KEYCODE_MAP;

// CAllKeyboardDlg 对话框

IMPLEMENT_DYNAMIC(CAllKeyboardDlg, CDialogEx)

CAllKeyboardDlg::CAllKeyboardDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CAllKeyboardDlg::IDD, pParent)
{

}

CAllKeyboardDlg::~CAllKeyboardDlg()
{
}

void CAllKeyboardDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_COMBO_SPECIAL_CHAR, m_cbSpecialCharacters);
	DDX_Control(pDX, IDC_COMBO_SPECIAL_OPERATIONS, m_cbSpecialOperations);
}


BEGIN_MESSAGE_MAP(CAllKeyboardDlg, CDialogEx)
	ON_BN_CLICKED(IDC_BTN_KEYBOARD_SEND_TEXT, &CAllKeyboardDlg::OnBnClickedBtnKeyboardSendText)
	ON_CBN_SELCHANGE(IDC_COMBO_SPECIAL_CHAR, &CAllKeyboardDlg::OnCbnSelchangeComboSpecialChar)
	ON_CBN_SELCHANGE(IDC_COMBO_SPECIAL_OPERATIONS, &CAllKeyboardDlg::OnCbnSelchangeComboSpecialOperations)
	ON_BN_CLICKED(IDC_CHECK_CAPTIONS, &CAllKeyboardDlg::OnBnClickedCheckCaptions)
	ON_WM_NCDESTROY()
END_MESSAGE_MAP()


static void InitKeyMaps()
{
	if (!KEYCODE_MAP.empty()) {
		return;
	}

	KEYCODE_MAP[IDC_BTN_KEY_F1] = KEYCODE_F1;
	KEYCODE_MAP[IDC_BTN_KEY_F2] = KEYCODE_F2;
	KEYCODE_MAP[IDC_BTN_KEY_F3] = KEYCODE_F3;
	KEYCODE_MAP[IDC_BTN_KEY_F4] = KEYCODE_F4;
	KEYCODE_MAP[IDC_BTN_KEY_F5] = KEYCODE_F5;
	KEYCODE_MAP[IDC_BTN_KEY_F6] = KEYCODE_F6;
	KEYCODE_MAP[IDC_BTN_KEY_F7] = KEYCODE_F7;
	KEYCODE_MAP[IDC_BTN_KEY_F8] = KEYCODE_F8;
	KEYCODE_MAP[IDC_BTN_KEY_F9] = KEYCODE_F9;
	KEYCODE_MAP[IDC_BTN_KEY_F10] = KEYCODE_F10;
	KEYCODE_MAP[IDC_BTN_KEY_F11] = KEYCODE_F11;
	KEYCODE_MAP[IDC_BTN_KEY_F12] = KEYCODE_F12;
	KEYCODE_MAP[IDC_BTN_KEY_0] = KEYCODE_0;
	KEYCODE_MAP[IDC_BTN_KEY_1] = KEYCODE_1;
	KEYCODE_MAP[IDC_BTN_KEY_2] = KEYCODE_2;
	KEYCODE_MAP[IDC_BTN_KEY_3] = KEYCODE_3;
	KEYCODE_MAP[IDC_BTN_KEY_4] = KEYCODE_4;
	KEYCODE_MAP[IDC_BTN_KEY_5] = KEYCODE_5;
	KEYCODE_MAP[IDC_BTN_KEY_6] = KEYCODE_6;
	KEYCODE_MAP[IDC_BTN_KEY_7] = KEYCODE_7;
	KEYCODE_MAP[IDC_BTN_KEY_8] = KEYCODE_8;
	KEYCODE_MAP[IDC_BTN_KEY_9] = KEYCODE_9;
	KEYCODE_MAP[IDC_BTN_KEY_A] = KEYCODE_A;
	KEYCODE_MAP[IDC_BTN_KEY_B] = KEYCODE_B;
	KEYCODE_MAP[IDC_BTN_KEY_C] = KEYCODE_C;
	KEYCODE_MAP[IDC_BTN_KEY_D] = KEYCODE_D;
	KEYCODE_MAP[IDC_BTN_KEY_E] = KEYCODE_E;
	KEYCODE_MAP[IDC_BTN_KEY_F] = KEYCODE_F;
	KEYCODE_MAP[IDC_BTN_KEY_G] = KEYCODE_G;
	KEYCODE_MAP[IDC_BTN_KEY_H] = KEYCODE_H;
	KEYCODE_MAP[IDC_BTN_KEY_I] = KEYCODE_I;
	KEYCODE_MAP[IDC_BTN_KEY_J] = KEYCODE_J;
	KEYCODE_MAP[IDC_BTN_KEY_K] = KEYCODE_K;
	KEYCODE_MAP[IDC_BTN_KEY_L] = KEYCODE_L;
	KEYCODE_MAP[IDC_BTN_KEY_M] = KEYCODE_M;
	KEYCODE_MAP[IDC_BTN_KEY_N] = KEYCODE_N;
	KEYCODE_MAP[IDC_BTN_KEY_O] = KEYCODE_O;
	KEYCODE_MAP[IDC_BTN_KEY_P] = KEYCODE_P;
	KEYCODE_MAP[IDC_BTN_KEY_Q] = KEYCODE_Q;
	KEYCODE_MAP[IDC_BTN_KEY_R] = KEYCODE_R;
	KEYCODE_MAP[IDC_BTN_KEY_S] = KEYCODE_S;
	KEYCODE_MAP[IDC_BTN_KEY_T] = KEYCODE_T;
	KEYCODE_MAP[IDC_BTN_KEY_U] = KEYCODE_U;
	KEYCODE_MAP[IDC_BTN_KEY_V] = KEYCODE_V;
	KEYCODE_MAP[IDC_BTN_KEY_W] = KEYCODE_W;
	KEYCODE_MAP[IDC_BTN_KEY_X] = KEYCODE_X;
	KEYCODE_MAP[IDC_BTN_KEY_Y] = KEYCODE_Y;
	KEYCODE_MAP[IDC_BTN_KEY_Z] = KEYCODE_Z;
	KEYCODE_MAP[IDC_BTN_KEY_ALT_LEFT] = KEYCODE_ALT_LEFT;
	KEYCODE_MAP[IDC_BTN_KEY_ALT_RIGHT] = KEYCODE_ALT_RIGHT;
	KEYCODE_MAP[IDC_BTN_KEY_SHIFT_LEFT] = KEYCODE_SHIFT_LEFT;
	KEYCODE_MAP[IDC_BTN_KEY_SHIFT_RIGHT] = KEYCODE_SHIFT_RIGHT;
	KEYCODE_MAP[IDC_BTN_KEY_SPACE] = KEYCODE_SPACE;
	KEYCODE_MAP[IDC_BTN_KEY_DEL] = KEYCODE_DEL;
	KEYCODE_MAP[IDC_BTN_KEY_ESCAPE] = KEYCODE_ESCAPE;

	SP_CHAR_KEYCODE_MAP[TEXT("star")] = KEYCODE_STAR;
	SP_CHAR_KEYCODE_MAP[TEXT("pound")] = KEYCODE_POUND;
	SP_CHAR_KEYCODE_MAP[TEXT("clear")] = KEYCODE_CLEAR;
	SP_CHAR_KEYCODE_MAP[TEXT("comma")] = KEYCODE_COMMA;
	SP_CHAR_KEYCODE_MAP[TEXT("period")] = KEYCODE_PERIOD;
	SP_CHAR_KEYCODE_MAP[TEXT("alt_left")] = KEYCODE_ALT_LEFT;
	SP_CHAR_KEYCODE_MAP[TEXT("alt_right")] = KEYCODE_ALT_RIGHT;
	SP_CHAR_KEYCODE_MAP[TEXT("shift_left")] = KEYCODE_SHIFT_LEFT;
	SP_CHAR_KEYCODE_MAP[TEXT("shift_right")] = KEYCODE_SHIFT_RIGHT;
	SP_CHAR_KEYCODE_MAP[TEXT("tab")] = KEYCODE_TAB;
	SP_CHAR_KEYCODE_MAP[TEXT("space")] = KEYCODE_SPACE;
	SP_CHAR_KEYCODE_MAP[TEXT("sym")] = KEYCODE_SYM;
	SP_CHAR_KEYCODE_MAP[TEXT("explorer")] = KEYCODE_EXPLORER;
	SP_CHAR_KEYCODE_MAP[TEXT("envelope")] = KEYCODE_ENVELOPE;
	SP_CHAR_KEYCODE_MAP[TEXT("enter")] = KEYCODE_ENTER;
	SP_CHAR_KEYCODE_MAP[TEXT("del")] = KEYCODE_DEL;
	SP_CHAR_KEYCODE_MAP[TEXT("grave")] = KEYCODE_GRAVE;
	SP_CHAR_KEYCODE_MAP[TEXT("minus")] = KEYCODE_MINUS;
	SP_CHAR_KEYCODE_MAP[TEXT("equals")] = KEYCODE_EQUALS;
	SP_CHAR_KEYCODE_MAP[TEXT("left_bracket")] = KEYCODE_LEFT_BRACKET;
	SP_CHAR_KEYCODE_MAP[TEXT("right_bracket")] = KEYCODE_RIGHT_BRACKET;
	SP_CHAR_KEYCODE_MAP[TEXT("backslash")] = KEYCODE_BACKSLASH;
	SP_CHAR_KEYCODE_MAP[TEXT("semicolon")] = KEYCODE_SEMICOLON;
	SP_CHAR_KEYCODE_MAP[TEXT("apostrophe")] = KEYCODE_APOSTROPHE;
	SP_CHAR_KEYCODE_MAP[TEXT("slash")] = KEYCODE_SLASH;
	SP_CHAR_KEYCODE_MAP[TEXT("at")] = KEYCODE_AT;

	SP_OPR_KEYCODE_MAP[TEXT("soft_left")] = KEYCODE_SOFT_LEFT;
	SP_OPR_KEYCODE_MAP[TEXT("soft_right")] = KEYCODE_SOFT_RIGHT;
	SP_OPR_KEYCODE_MAP[TEXT("home")] = KEYCODE_HOME;
	SP_OPR_KEYCODE_MAP[TEXT("back")] = KEYCODE_BACK;
	SP_OPR_KEYCODE_MAP[TEXT("call")] = KEYCODE_CALL;
	SP_OPR_KEYCODE_MAP[TEXT("endcall")] = KEYCODE_ENDCALL;
	SP_OPR_KEYCODE_MAP[TEXT("dpad_up")] = KEYCODE_DPAD_UP;
	SP_OPR_KEYCODE_MAP[TEXT("dpad_down")] = KEYCODE_DPAD_DOWN;
	SP_OPR_KEYCODE_MAP[TEXT("dpad_left")] = KEYCODE_DPAD_LEFT;
	SP_OPR_KEYCODE_MAP[TEXT("dpad_right")] = KEYCODE_DPAD_RIGHT;
	SP_OPR_KEYCODE_MAP[TEXT("dpad_center")] = KEYCODE_DPAD_CENTER;
	SP_OPR_KEYCODE_MAP[TEXT("volume_up")] = KEYCODE_VOLUME_UP;
	SP_OPR_KEYCODE_MAP[TEXT("volume_down")] = KEYCODE_VOLUME_DOWN;
	SP_OPR_KEYCODE_MAP[TEXT("power")] = KEYCODE_POWER;
	SP_OPR_KEYCODE_MAP[TEXT("camera")] = KEYCODE_CAMERA;
	SP_OPR_KEYCODE_MAP[TEXT("clear")] = KEYCODE_CLEAR;
	SP_OPR_KEYCODE_MAP[TEXT("num")] = KEYCODE_NUM;
	SP_OPR_KEYCODE_MAP[TEXT("headsethook")] = KEYCODE_HEADSETHOOK;
	SP_OPR_KEYCODE_MAP[TEXT("plus")] = KEYCODE_PLUS;
	SP_OPR_KEYCODE_MAP[TEXT("menu")] = KEYCODE_MENU;
	SP_OPR_KEYCODE_MAP[TEXT("notification")] = KEYCODE_NOTIFICATION;
	SP_OPR_KEYCODE_MAP[TEXT("search")] = KEYCODE_SEARCH;
	SP_OPR_KEYCODE_MAP[TEXT("media_play_pause")] = KEYCODE_MEDIA_PLAY_PAUSE;
	SP_OPR_KEYCODE_MAP[TEXT("media_stop")] = KEYCODE_MEDIA_STOP;
	SP_OPR_KEYCODE_MAP[TEXT("media_next")] = KEYCODE_MEDIA_NEXT;
	SP_OPR_KEYCODE_MAP[TEXT("media_previous")] = KEYCODE_MEDIA_PREVIOUS;
	SP_OPR_KEYCODE_MAP[TEXT("media_rewind")] = KEYCODE_MEDIA_REWIND;
	SP_OPR_KEYCODE_MAP[TEXT("media_fast_forward")] = KEYCODE_MEDIA_FAST_FORWARD;
	SP_OPR_KEYCODE_MAP[TEXT("mute")] = KEYCODE_MUTE;
	SP_OPR_KEYCODE_MAP[TEXT("page_up")] = KEYCODE_PAGE_UP;
	SP_OPR_KEYCODE_MAP[TEXT("page_down")] = KEYCODE_PAGE_DOWN;
	SP_OPR_KEYCODE_MAP[TEXT("pictsymbols")] = KEYCODE_PICTSYMBOLS;
	SP_OPR_KEYCODE_MAP[TEXT("switch_charset")] = KEYCODE_SWITCH_CHARSET;
	SP_OPR_KEYCODE_MAP[TEXT("button_a")] = KEYCODE_BUTTON_A;
	SP_OPR_KEYCODE_MAP[TEXT("button_b")] = KEYCODE_BUTTON_B;
	SP_OPR_KEYCODE_MAP[TEXT("button_c")] = KEYCODE_BUTTON_C;
	SP_OPR_KEYCODE_MAP[TEXT("button_x")] = KEYCODE_BUTTON_X;
	SP_OPR_KEYCODE_MAP[TEXT("button_y")] = KEYCODE_BUTTON_Y;
	SP_OPR_KEYCODE_MAP[TEXT("button_z")] = KEYCODE_BUTTON_Z;
	SP_OPR_KEYCODE_MAP[TEXT("button_l1")] = KEYCODE_BUTTON_L1;
	SP_OPR_KEYCODE_MAP[TEXT("button_r1")] = KEYCODE_BUTTON_R1;
	SP_OPR_KEYCODE_MAP[TEXT("button_l2")] = KEYCODE_BUTTON_L2;
	SP_OPR_KEYCODE_MAP[TEXT("button_r2")] = KEYCODE_BUTTON_R2;
	SP_OPR_KEYCODE_MAP[TEXT("button_thumbl")] = KEYCODE_BUTTON_THUMBL;
	SP_OPR_KEYCODE_MAP[TEXT("button_thumbr")] = KEYCODE_BUTTON_THUMBR;
	SP_OPR_KEYCODE_MAP[TEXT("button_start")] = KEYCODE_BUTTON_START;
	SP_OPR_KEYCODE_MAP[TEXT("button_select")] = KEYCODE_BUTTON_SELECT;
	SP_OPR_KEYCODE_MAP[TEXT("button_mode")] = KEYCODE_BUTTON_MODE;
	SP_OPR_KEYCODE_MAP[TEXT("escape")] = KEYCODE_ESCAPE;
	SP_OPR_KEYCODE_MAP[TEXT("forward_del")] = KEYCODE_FORWARD_DEL;
	SP_OPR_KEYCODE_MAP[TEXT("ctrl_left")] = KEYCODE_CTRL_LEFT;
	SP_OPR_KEYCODE_MAP[TEXT("ctrl_right")] = KEYCODE_CTRL_RIGHT;
	SP_OPR_KEYCODE_MAP[TEXT("caps_lock")] = KEYCODE_CAPS_LOCK;
	SP_OPR_KEYCODE_MAP[TEXT("scroll_lock")] = KEYCODE_SCROLL_LOCK;
	SP_OPR_KEYCODE_MAP[TEXT("meta_left")] = KEYCODE_META_LEFT;
	SP_OPR_KEYCODE_MAP[TEXT("meta_right")] = KEYCODE_META_RIGHT;
	SP_OPR_KEYCODE_MAP[TEXT("function")] = KEYCODE_FUNCTION;
	SP_OPR_KEYCODE_MAP[TEXT("sysrq")] = KEYCODE_SYSRQ;
	SP_OPR_KEYCODE_MAP[TEXT("break")] = KEYCODE_BREAK;
	SP_OPR_KEYCODE_MAP[TEXT("move_home")] = KEYCODE_MOVE_HOME;
	SP_OPR_KEYCODE_MAP[TEXT("move_end")] = KEYCODE_MOVE_END;
	SP_OPR_KEYCODE_MAP[TEXT("insert")] = KEYCODE_INSERT;
	SP_OPR_KEYCODE_MAP[TEXT("forward")] = KEYCODE_FORWARD;
	SP_OPR_KEYCODE_MAP[TEXT("media_play")] = KEYCODE_MEDIA_PLAY;
	SP_OPR_KEYCODE_MAP[TEXT("media_pause")] = KEYCODE_MEDIA_PAUSE;
	SP_OPR_KEYCODE_MAP[TEXT("media_close")] = KEYCODE_MEDIA_CLOSE;
	SP_OPR_KEYCODE_MAP[TEXT("media_eject")] = KEYCODE_MEDIA_EJECT;
	SP_OPR_KEYCODE_MAP[TEXT("media_record")] = KEYCODE_MEDIA_RECORD;
	SP_OPR_KEYCODE_MAP[TEXT("volume_mute")] = KEYCODE_VOLUME_MUTE;
	SP_OPR_KEYCODE_MAP[TEXT("info")] = KEYCODE_INFO;
	SP_OPR_KEYCODE_MAP[TEXT("channel_up")] = KEYCODE_CHANNEL_UP;
	SP_OPR_KEYCODE_MAP[TEXT("channel_down")] = KEYCODE_CHANNEL_DOWN;
	SP_OPR_KEYCODE_MAP[TEXT("zoom_in")] = KEYCODE_ZOOM_IN;
	SP_OPR_KEYCODE_MAP[TEXT("zoom_out")] = KEYCODE_ZOOM_OUT;
	SP_OPR_KEYCODE_MAP[TEXT("tv")] = KEYCODE_TV;
	SP_OPR_KEYCODE_MAP[TEXT("window")] = KEYCODE_WINDOW;
	SP_OPR_KEYCODE_MAP[TEXT("guide")] = KEYCODE_GUIDE;
	SP_OPR_KEYCODE_MAP[TEXT("dvr")] = KEYCODE_DVR;
	SP_OPR_KEYCODE_MAP[TEXT("bookmark")] = KEYCODE_BOOKMARK;
	SP_OPR_KEYCODE_MAP[TEXT("captions")] = KEYCODE_CAPTIONS;
	SP_OPR_KEYCODE_MAP[TEXT("settings")] = KEYCODE_SETTINGS;
	SP_OPR_KEYCODE_MAP[TEXT("tv_power")] = KEYCODE_TV_POWER;
	SP_OPR_KEYCODE_MAP[TEXT("tv_input")] = KEYCODE_TV_INPUT;
	SP_OPR_KEYCODE_MAP[TEXT("stb_power")] = KEYCODE_STB_POWER;
	SP_OPR_KEYCODE_MAP[TEXT("stb_input")] = KEYCODE_STB_INPUT;
	SP_OPR_KEYCODE_MAP[TEXT("avr_power")] = KEYCODE_AVR_POWER;
	SP_OPR_KEYCODE_MAP[TEXT("avr_input")] = KEYCODE_AVR_INPUT;
	SP_OPR_KEYCODE_MAP[TEXT("prog_red")] = KEYCODE_PROG_RED;
	SP_OPR_KEYCODE_MAP[TEXT("prog_green")] = KEYCODE_PROG_GREEN;
	SP_OPR_KEYCODE_MAP[TEXT("prog_yellow")] = KEYCODE_PROG_YELLOW;
	SP_OPR_KEYCODE_MAP[TEXT("prog_blue")] = KEYCODE_PROG_BLUE;
	SP_OPR_KEYCODE_MAP[TEXT("app_switch")] = KEYCODE_APP_SWITCH;
	SP_OPR_KEYCODE_MAP[TEXT("button_1")] = KEYCODE_BUTTON_1;
	SP_OPR_KEYCODE_MAP[TEXT("button_2")] = KEYCODE_BUTTON_2;
	SP_OPR_KEYCODE_MAP[TEXT("button_3")] = KEYCODE_BUTTON_3;
	SP_OPR_KEYCODE_MAP[TEXT("button_4")] = KEYCODE_BUTTON_4;
	SP_OPR_KEYCODE_MAP[TEXT("button_5")] = KEYCODE_BUTTON_5;
	SP_OPR_KEYCODE_MAP[TEXT("button_6")] = KEYCODE_BUTTON_6;
	SP_OPR_KEYCODE_MAP[TEXT("button_7")] = KEYCODE_BUTTON_7;
	SP_OPR_KEYCODE_MAP[TEXT("button_8")] = KEYCODE_BUTTON_8;
	SP_OPR_KEYCODE_MAP[TEXT("button_9")] = KEYCODE_BUTTON_9;
	SP_OPR_KEYCODE_MAP[TEXT("button_10")] = KEYCODE_BUTTON_10;
	SP_OPR_KEYCODE_MAP[TEXT("button_11")] = KEYCODE_BUTTON_11;
	SP_OPR_KEYCODE_MAP[TEXT("button_12")] = KEYCODE_BUTTON_12;
	SP_OPR_KEYCODE_MAP[TEXT("button_13")] = KEYCODE_BUTTON_13;
	SP_OPR_KEYCODE_MAP[TEXT("button_14")] = KEYCODE_BUTTON_14;
	SP_OPR_KEYCODE_MAP[TEXT("button_15")] = KEYCODE_BUTTON_15;
	SP_OPR_KEYCODE_MAP[TEXT("button_16")] = KEYCODE_BUTTON_16;
	SP_OPR_KEYCODE_MAP[TEXT("language_switch")] = KEYCODE_LANGUAGE_SWITCH;
	SP_OPR_KEYCODE_MAP[TEXT("manner_mode")] = KEYCODE_MANNER_MODE;
	SP_OPR_KEYCODE_MAP[TEXT("3d_mode")] = KEYCODE_3D_MODE;
	SP_OPR_KEYCODE_MAP[TEXT("contacts")] = KEYCODE_CONTACTS;
	SP_OPR_KEYCODE_MAP[TEXT("calendar")] = KEYCODE_CALENDAR;
	SP_OPR_KEYCODE_MAP[TEXT("music")] = KEYCODE_MUSIC;
	SP_OPR_KEYCODE_MAP[TEXT("calculator")] = KEYCODE_CALCULATOR;
	SP_OPR_KEYCODE_MAP[TEXT("zenkaku_hankaku")] = KEYCODE_ZENKAKU_HANKAKU;
	SP_OPR_KEYCODE_MAP[TEXT("eisu")] = KEYCODE_EISU;
	SP_OPR_KEYCODE_MAP[TEXT("muhenkan")] = KEYCODE_MUHENKAN;
	SP_OPR_KEYCODE_MAP[TEXT("henkan")] = KEYCODE_HENKAN;
	SP_OPR_KEYCODE_MAP[TEXT("katakana_hiragana")] = KEYCODE_KATAKANA_HIRAGANA;
	SP_OPR_KEYCODE_MAP[TEXT("yen")] = KEYCODE_YEN;
	SP_OPR_KEYCODE_MAP[TEXT("ro")] = KEYCODE_RO;
	SP_OPR_KEYCODE_MAP[TEXT("kana")] = KEYCODE_KANA;
	SP_OPR_KEYCODE_MAP[TEXT("assist")] = KEYCODE_ASSIST;
	SP_OPR_KEYCODE_MAP[TEXT("brightness_down")] = KEYCODE_BRIGHTNESS_DOWN;
	SP_OPR_KEYCODE_MAP[TEXT("brightness_up")] = KEYCODE_BRIGHTNESS_UP;
	SP_OPR_KEYCODE_MAP[TEXT("media_audio_track")] = KEYCODE_MEDIA_AUDIO_TRACK;
	SP_OPR_KEYCODE_MAP[TEXT("sleep")] = KEYCODE_SLEEP;
	SP_OPR_KEYCODE_MAP[TEXT("wakeup")] = KEYCODE_WAKEUP;
	SP_OPR_KEYCODE_MAP[TEXT("pairing")] = KEYCODE_PAIRING;
	SP_OPR_KEYCODE_MAP[TEXT("media_top_menu")] = KEYCODE_MEDIA_TOP_MENU;
	SP_OPR_KEYCODE_MAP[TEXT("11")] = KEYCODE_11;
	SP_OPR_KEYCODE_MAP[TEXT("12")] = KEYCODE_12;
	SP_OPR_KEYCODE_MAP[TEXT("last_channel")] = KEYCODE_LAST_CHANNEL;
	SP_OPR_KEYCODE_MAP[TEXT("tv_data_service")] = KEYCODE_TV_DATA_SERVICE;
	SP_OPR_KEYCODE_MAP[TEXT("voice_assist")] = KEYCODE_VOICE_ASSIST;
	SP_OPR_KEYCODE_MAP[TEXT("tv_radio_service")] = KEYCODE_TV_RADIO_SERVICE;
	SP_OPR_KEYCODE_MAP[TEXT("tv_teletext")] = KEYCODE_TV_TELETEXT;
	SP_OPR_KEYCODE_MAP[TEXT("tv_number_entry")] = KEYCODE_TV_NUMBER_ENTRY;
	SP_OPR_KEYCODE_MAP[TEXT("tv_terrestrial_analog")] = KEYCODE_TV_TERRESTRIAL_ANALOG;
	SP_OPR_KEYCODE_MAP[TEXT("tv_terrestrial_digital")] = KEYCODE_TV_TERRESTRIAL_DIGITAL;
	SP_OPR_KEYCODE_MAP[TEXT("tv_satellite")] = KEYCODE_TV_SATELLITE;
	SP_OPR_KEYCODE_MAP[TEXT("tv_satellite_bs")] = KEYCODE_TV_SATELLITE_BS;
	SP_OPR_KEYCODE_MAP[TEXT("tv_satellite_cs")] = KEYCODE_TV_SATELLITE_CS;
	SP_OPR_KEYCODE_MAP[TEXT("tv_satellite_service")] = KEYCODE_TV_SATELLITE_SERVICE;
	SP_OPR_KEYCODE_MAP[TEXT("tv_network")] = KEYCODE_TV_NETWORK;
	SP_OPR_KEYCODE_MAP[TEXT("tv_antenna_cable")] = KEYCODE_TV_ANTENNA_CABLE;
	SP_OPR_KEYCODE_MAP[TEXT("tv_input_hdmi_1")] = KEYCODE_TV_INPUT_HDMI_1;
	SP_OPR_KEYCODE_MAP[TEXT("tv_input_hdmi_2")] = KEYCODE_TV_INPUT_HDMI_2;
	SP_OPR_KEYCODE_MAP[TEXT("tv_input_hdmi_3")] = KEYCODE_TV_INPUT_HDMI_3;
	SP_OPR_KEYCODE_MAP[TEXT("tv_input_hdmi_4")] = KEYCODE_TV_INPUT_HDMI_4;
	SP_OPR_KEYCODE_MAP[TEXT("tv_input_composite_1")] = KEYCODE_TV_INPUT_COMPOSITE_1;
	SP_OPR_KEYCODE_MAP[TEXT("tv_input_composite_2")] = KEYCODE_TV_INPUT_COMPOSITE_2;
	SP_OPR_KEYCODE_MAP[TEXT("tv_input_component_1")] = KEYCODE_TV_INPUT_COMPONENT_1;
	SP_OPR_KEYCODE_MAP[TEXT("tv_input_component_2")] = KEYCODE_TV_INPUT_COMPONENT_2;
	SP_OPR_KEYCODE_MAP[TEXT("tv_input_vga_1")] = KEYCODE_TV_INPUT_VGA_1;
	SP_OPR_KEYCODE_MAP[TEXT("tv_audio_description")] = KEYCODE_TV_AUDIO_DESCRIPTION;
	SP_OPR_KEYCODE_MAP[TEXT("tv_audio_description_mix_up")] = KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP;
	SP_OPR_KEYCODE_MAP[TEXT("tv_audio_description_mix_down")] = KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN;
	SP_OPR_KEYCODE_MAP[TEXT("tv_zoom_mode")] = KEYCODE_TV_ZOOM_MODE;
	SP_OPR_KEYCODE_MAP[TEXT("tv_contents_menu")] = KEYCODE_TV_CONTENTS_MENU;
	SP_OPR_KEYCODE_MAP[TEXT("tv_media_context_menu")] = KEYCODE_TV_MEDIA_CONTEXT_MENU;
	SP_OPR_KEYCODE_MAP[TEXT("tv_timer_programming")] = KEYCODE_TV_TIMER_PROGRAMMING;
	SP_OPR_KEYCODE_MAP[TEXT("help")] = KEYCODE_HELP;
	SP_OPR_KEYCODE_MAP[TEXT("navigate_previous")] = KEYCODE_NAVIGATE_PREVIOUS;
	SP_OPR_KEYCODE_MAP[TEXT("navigate_next")] = KEYCODE_NAVIGATE_NEXT;
	SP_OPR_KEYCODE_MAP[TEXT("navigate_in")] = KEYCODE_NAVIGATE_IN;
	SP_OPR_KEYCODE_MAP[TEXT("navigate_out")] = KEYCODE_NAVIGATE_OUT;
	SP_OPR_KEYCODE_MAP[TEXT("stem_primary")] = KEYCODE_STEM_PRIMARY;
	SP_OPR_KEYCODE_MAP[TEXT("stem_1")] = KEYCODE_STEM_1;
	SP_OPR_KEYCODE_MAP[TEXT("stem_2")] = KEYCODE_STEM_2;
	SP_OPR_KEYCODE_MAP[TEXT("stem_3")] = KEYCODE_STEM_3;
	SP_OPR_KEYCODE_MAP[TEXT("dpad_up_left")] = KEYCODE_DPAD_UP_LEFT;
	SP_OPR_KEYCODE_MAP[TEXT("dpad_down_left")] = KEYCODE_DPAD_DOWN_LEFT;
	SP_OPR_KEYCODE_MAP[TEXT("dpad_up_right")] = KEYCODE_DPAD_UP_RIGHT;
	SP_OPR_KEYCODE_MAP[TEXT("dpad_down_right")] = KEYCODE_DPAD_DOWN_RIGHT;
	SP_OPR_KEYCODE_MAP[TEXT("media_skip_forward")] = KEYCODE_MEDIA_SKIP_FORWARD;
	SP_OPR_KEYCODE_MAP[TEXT("media_skip_backward")] = KEYCODE_MEDIA_SKIP_BACKWARD;
	SP_OPR_KEYCODE_MAP[TEXT("media_step_forward")] = KEYCODE_MEDIA_STEP_FORWARD;
	SP_OPR_KEYCODE_MAP[TEXT("media_step_backward")] = KEYCODE_MEDIA_STEP_BACKWARD;
	SP_OPR_KEYCODE_MAP[TEXT("soft_sleep")] = KEYCODE_SOFT_SLEEP;
	SP_OPR_KEYCODE_MAP[TEXT("cut")] = KEYCODE_CUT;
	SP_OPR_KEYCODE_MAP[TEXT("copy")] = KEYCODE_COPY;
	SP_OPR_KEYCODE_MAP[TEXT("paste")] = KEYCODE_PASTE;
	SP_OPR_KEYCODE_MAP[TEXT("system_navigation_up")] = KEYCODE_SYSTEM_NAVIGATION_UP;
	SP_OPR_KEYCODE_MAP[TEXT("system_navigation_down")] = KEYCODE_SYSTEM_NAVIGATION_DOWN;
	SP_OPR_KEYCODE_MAP[TEXT("system_navigation_left")] = KEYCODE_SYSTEM_NAVIGATION_LEFT;
	SP_OPR_KEYCODE_MAP[TEXT("system_navigation_right")] = KEYCODE_SYSTEM_NAVIGATION_RIGHT;
}

BOOL CAllKeyboardDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	InitKeyMaps();
	map<CString, int>::const_iterator cit = SP_CHAR_KEYCODE_MAP.begin();
	for (; cit != SP_CHAR_KEYCODE_MAP.end(); cit++) {
		m_cbSpecialCharacters.AddString(cit->first);
	}

	cit = SP_OPR_KEYCODE_MAP.begin();
	for (; cit != SP_OPR_KEYCODE_MAP.end(); cit++) {
		m_cbSpecialOperations.AddString(cit->first);
	}

	return TRUE;
}



BOOL CAllKeyboardDlg::PreTranslateMessage(MSG* pMsg)
{
	UINT ctrlId = GetWindowLong(pMsg->hwnd,GWL_ID);
	if (pMsg->message == WM_LBUTTONDOWN) {
		map<UINT, int>::const_iterator it = KEYCODE_MAP.find(ctrlId);
		if (it != KEYCODE_MAP.end()) {
			ADB.SendKeyEvent(it->second);
			return TRUE;
		}
	}
	
	return CDialogEx::PreTranslateMessage(pMsg);
}

void CAllKeyboardDlg::OnBnClickedBtnKeyboardSendText()
{
	CString text;
	GetDlgItemText(IDC_EDIT_TEXT_TO_SEND, text);

	if (!text.IsEmpty()) {
		ADB.SendText(text);
	}
}


void CAllKeyboardDlg::OnCbnSelchangeComboSpecialChar()
{
	CString strText;
	m_cbSpecialCharacters.GetWindowTextW(strText);

	map<CString, int>::const_iterator cit = SP_CHAR_KEYCODE_MAP.find(strText);
	if (cit != SP_CHAR_KEYCODE_MAP.end()) {
		ADB.SendKeyEvent(cit->second);
	}
}


void CAllKeyboardDlg::OnCbnSelchangeComboSpecialOperations()
{
	CString strText;
	m_cbSpecialOperations.GetWindowTextW(strText);

	map<CString, int>::const_iterator cit = SP_OPR_KEYCODE_MAP.find(strText);
	if (cit != SP_OPR_KEYCODE_MAP.end()) {
		ADB.SendKeyEvent(cit->second);
	}
}


void CAllKeyboardDlg::OnBnClickedCheckCaptions()
{
	BOOL checked = ((CButton*)GetDlgItem(IDC_CHECK_CAPTIONS))->GetCheck() == BST_CHECKED;

	ADB.SendKeyEvent(KEYCODE_CAPS_LOCK);
}


void CAllKeyboardDlg::OnNcDestroy()
{
	CDialogEx::OnNcDestroy();
	delete this;
}
